generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Recipe {
  id            String         @id @default(cuid())
  uploadedAt    DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  imagePublicId String
  name          String         @unique
  slug          String         @unique
  summary       String
  servings      Int
  cooking       Float
  preparation   Float
  total         Float
  ingredients   Json
  instructions  Json
  nutrition     Json
  uploader      User           @relation(fields: [uploaderId], references: [id], onDelete: Cascade)
  uploaderId    String
  likes         LikedRecipes[]

  @@map("recipe")
}

model LikedRecipes {
  id        String   @id @default(cuid())
  recipe    Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId  String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @unique
  createdAt DateTime @default(now())

  @@map("likedRecipes")
}

model User {
  id            String         @id
  firstName     String
  lastName      String
  name          String
  email         String
  emailVerified Boolean
  defaultImage  String
  image         String?
  bio           String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  recipes       Recipe[]
  likedRecipes  LikedRecipes[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
